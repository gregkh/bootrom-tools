#! /usr/bin/env python

#
# Copyright (c) 2015 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# Generate <count> legal IMS values (i.e. 280-bit random numbers having a
# Hamming weight of 140)

from __future__ import print_function
from array import array
import random
import argparse
from util import print_to_error

IMS_BITS = 280
IMS_BYTES = (IMS_BITS + 7)//8
IMS_DWORDS = (IMS_BYTES + 3)//4

# Array for the IMS value
ims = array('L', [0, 0, 0, 0, 0, 0, 0, 0, 0])

# Array for the per-word Hamming weights
hammings = array('i', [0, 0, 0, 0, 0, 0, 0, 0, 0])

# Hamming weight of IMS
ims_hamming = 0


def permute_ims():
    """ Permute the IMS and print it if it is valid

    Returns true if valid, false otherwise
    """
    global ims, hammings, ims_hamming

    # Permute the IMS, one 32-bit word at a time
    for i in range(0, IMS_DWORDS):
        # Replace 1 32-bit word at a time with randomness
        ims[i] = random.getrandbits(32)
        # Mask off the unused bits in the last word
        if i == (IMS_DWORDS - 1):
            ims[i] &= 0x00ffffff

        ims_hamming -= hammings[i]
        # Calculate the Hamming weight of this element
        hammings[i] = bin(ims[i]).count("1")
        ims_hamming += hammings[i]

    # If the hamming weight is correct, issue this IMS
    return ims_hamming == (IMS_BITS / 2)


def main():
    """ Application for creating plausible stand-in IMS values """
    global ims

    parser = argparse.ArgumentParser()

    parser.add_argument("--count",
                        type=int,
                        required=True,
                        help="How many IMS values to generate")

    args = parser.parse_args()
    print_to_error("Generate", args.count, "IMS values:")

    num_generated = 0
    while num_generated < args.count:
        if permute_ims():
            num_generated += 1
            print("{0:06x} {1:08x} {2:08x} {3:08x} {4:08x} "
                  "{5:08x} {6:08x} {7:08x} {8:08x}".
                  format(ims[8], ims[7], ims[6], ims[5], ims[4],
                         ims[3], ims[2], ims[1], ims[0]))


## Launch main
#
if __name__ == '__main__':
    main()

#!/bin/bash
#
# Copyright (c) 2015 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#------------------------------------------------------------------------------
# Make debug and non-debug es3-test folders and bundle them into a single
# tar.gz drop file.
#
# Usage:
#    makedrop {-v} {-dme} --rev=<revision>
#
#    -v                  Verbose mode on TFTF creation
#    --rev=<revision>    The revision in git to build the boot ROM code
#    -dme                Enable DME-write logging
#------------------------------------------------------------------------------
BuildRoot=~/work/bootrom
BuildDir=~/work/bootrom/build
BinDir=~/work/bootrom/binary
KeyDir=~/bin
AssyDir=~/bootrom-tools/es3-test
DropDir=~/es3-test
DbgDir=es3-test-dbg
NonDbgDir=es3-test-nodbg

REV=
#-----
# Process any args
#-----
for arg in "$@" ; do    # arg will be each positional parameter
    if [[ ${arg} == "-v" ]]; then       # TFTF verbose mode
        Verbose=${arg}
    elif [[ ${arg} == "-dme" ]]; then
        # Capture DME writes to dbgserial
        DmeLogging=${arg}
    elif [[ ${arg} == --rev=* ]]; then
        REV="${arg#*=}"
    else
        echo "Makeall: unknown arg $arg"
        exit 1
    fi
done

# Substitute the L3FW for L2FW to make simulation quicker
Subst342="-342"

if [ "${REV}" == "" ]; then
    echo "You have to specify a revision to build the boot ROM code"
    echo "Usage: $(basename $0) --rev=<revision> [-v]"
    exit 1
fi

StdSim="-nodelay"

#-----
# Establish the argument lists for the various configurations
#-----
# The real thing: no extraneous support for testing (opt-crypto-quiet)
StdProd="-es3tsb $Subst342 $Verbose"

# Noisy version for Simulation - slower, but easier to analyze (opt-nc-uart-hs)
StdNoisy="-es3tsb -nocrypto -debugmsg -handshake $Subst342 $Verbose $StdSim $DmeLogging"

# Quiet version for Simulator, used once we no longer need the noisy version
# to help analyze tests (opt-nc-quiet-hs)
StdQuiet="-es3tsb -nocrypto -handshake $Subst342 $Verbose $StdSim"

# Standard version for HAPS FPGA (opt-crypto-uart-hs)
StdFpga="-fpgatsb -nocrypto -debugmsg -handshake $Subst342 $Verbose $StdSim $DmeLogging"

# Standard version for HAPS FPGA, c/w debug symbols" (debug-crypto-uart-hs)
StdFpgaDbg="-fpgatsb -dbg -debugmsg -handshake $Subst342 $Verbose $StdSim $DmeLogging"

# Specially instrumented builds for fault induction on simulator only.
# Test				Purpose
Spec_StandbyTest=1		# Allow 3rd stage FW to try to put the chip
				# into standby. 
Spec_GBBootSrvStandbyTest=2	# STANDBY_TEST plus 3rd stage FW waits for the
				# server to put UniPro to hibern8 mode before
				# suspend
Spec_GearChangeTest=3		# Run the SpiRom at different gear speeds

# Specially instrumented builds for fault induction on simulator only, and noisy besides (opt-nc-uart-spec-##)
SpecNoisy_Standby="-es3tsb -nocrypto -debugmsg --spec=$Spec_StandbyTest $Subst342 $Verbose $StdSim"
SpecNoisy_GBBootSrvStandby="-es3tsb -nocrypto -debugmsg --spec=$Spec_GBBootSrvStandbyTest $Subst342 $Verbose $StdSim"
SpecNoisy_GearChange="-es3tsb -nocrypto -debugmsg --spec=$Spec_GearChangeTest $Subst342 $Verbose $StdSim"


# Specially instrumented builds for fault induction on simulator only, but quiet (opt-nc-quiet-spec-##)
SpecQuiet_Standby="-es3tsb -nocrypto --spec=$Spec_StandbyTest $Subst342 $Verbose $StdSim"
SpecQuiet_GBBootSrvStandby="-es3tsb -nocrypto --spec=$Spec_GBBootSrvStandbyTest $Subst342 $Verbose $StdSim"
SpecQuiet_GearChange="-es3tsb -nocrypto --spec=$Spec_GearChangeTest $Subst342 $Verbose $StdSim"

#-----
# Lists of build targets and names
#-----
Targets=("$StdNoisy" "$StdProd" "$StdQuiet" "$StdFpga" "$StdFpgaDbg")
Targets+=("$SpecNoisy_Standby" "$SpecNoisy_GBBootSrvStandby" "$SpecNoisy_GearChange")
Targets+=("$SpecQuiet_Standby" "$SpecQuiet_GBBootSrvStandby" "$SpecQuiet_GearChange")
TargetNames=("StdNoisy" "StdProd" "StdQuiet" "StdFpga" "StdFpgaDbg")
TargetNames+=("SpecNoisy_Standby" "SpecNoisy_GBBootSrvStandby" "SpecNoisy_GearChange")
TargetNames+=("SpecQuiet_Standby" "SpecQuiet_GBBootSrvStandby" "SpecQuiet_GearChange")



#-----
# Make all the canonical builds
#-----
First=false
for ((i=0; i<${#Targets[*]}; i++));
do
    params=${Targets[i]}
    name=${TargetNames[i]}
    echo "making: $i ($name): $params"
    if ! $First; then
        # The first time, we first clear the drop folder
        makeall $params $Verbose $Subst342 --rev=${REV}
        First=true
    else
        makeall $params -justboot $Verbose $Subst342 --rev=${REV}
    fi
    if [[ $? == 0 ]]; then
        echo "Built bootrom: $name"
    else
        echo "Problems building bootrom config: $name"
        exit 1
    fi
done


# Zip it all up
echo "Generating drop..."
pushd ~
Archive="`date +%Y%m%d-%H%M-%Z`.es3-test.tar.gz"
tar -zcvf ./$Archive es3-test
popd
echo "Dropped to ~/$Archive"

# Done


#!/bin/bash
#
# Copyright (c) 2015 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#------------------------------------------------------------------------------
# Make all 3 images, their TFTF files, and  FFFF file, and the GBBOOT server
# as if the -sim (_SIMULATION) flag still existed
#
# Usage:
#    make3sim {-es2tsb | -es3tsb | -fpgatsb } {-sign} {-v} {-prod} \
#             {-spec <num>} {-dme} {-342} --rev=<revision>
#
#    -v        Verbose mode on TFTF creation
#    -prod     Enable _PRODUCTION mode for all 3 firmware levels
#    -sign     Sign both level 2 & 3 firmware
#    -es2tsb, -es3tsb, -fpgatsb
#              Select the build target
#
# TESTING parameters:
#    -spec <num>	Compile special test number `<num>`.
#    -dme               Enable DME-write logging
#    -342		Substitute the L3FW for L2FW to speed simulation
#    --rev=<revision>    The revision in git to build the boot ROM code
#------------------------------------------------------------------------------

#-----
# Process any args
#-----
SpecialTest=false
HaveSpecialTest=false
REV=
for arg in "$@" ; do    # arg will be each positional parameter
    if $SpecialTest; then
        # The previous arg was "-spec", so pick up the special test no.
        SpecialTestNum=${arg}
        HaveSpecialTest=true
        SpecialTest=false
    elif [[ ${arg} == "-spec" ]]; then
        # Take the next arg as a special test number
        SpecialTest=true
    elif [[ ${arg} == "-sign" ]]; then    # Sign the 2nd & 3rd level Firmware?
        Sign=${arg}
    elif [[ ${arg} == "-dbg" ]]; then     # Build with debugging symbols
        DbgMode=${arg}
    elif [[ ${arg} == "-prod" ]]; then    # Compile all levels for Toshba Simulation
        Production=${arg}
    elif [[ ${arg} == "-es2tsb" ]]; then  # select target configuration
        CONFIG_CHIP="es2tsb"
    elif [[ ${arg} == "-es3tsb" ]]; then  # select target configuration
        CONFIG_CHIP="es3tsb"
    elif [[ ${arg} == "-fpgatsb" ]]; then # select target configuration
        CONFIG_CHIP="fpgatsb"
    elif [[ ${arg} == "-v" ]]; then       # TFTF verbose mode
        Verbose=${arg}
    elif [[ ${arg} == "-dme" ]]; then
        # Capture DME writes to dbgserial
        DmeLogging=${arg}
    elif [[ ${arg} == "-342" ]]; then
        # Substitute the L3FW for L2FW to speed simulation
        Subst342=${arg}
    elif [[ ${arg} == --rev=* ]]; then
        REV="${arg}"
    else
        echo "make3sim: unknown arg $arg"
        exit 1
    fi
done

if [ "${REV}" == "" ]; then
    echo "You have to specify a revision to build the boot ROM code"
    echo "Usage: $(basename $0) --rev=<revision> [-v]"
    exit 1
fi

# Fill in missing chip
if [ ! $CONFIG_CHIP ]; then
    echo "CONFIG_CHIP not set, assuming $DEFAULT_CHIP_CONFIG"
    CONFIG_CHIP=$DEFAULT_CHIP_CONFIG
fi


if $HaveSpecialTest; then
    make3 -$CONFIG_CHIP -nocrypto -nodelay -debugmsg -handshake \
          $Sign $DbgMode $Production $DmeLogging $Verbose $Subst342 -spec $SpecialTestNum $REV
else
    make3 -$CONFIG_CHIP -nocrypto -nodelay -debugmsg -handshake \
          $Sign $DbgMode $Production $DmeLogging $Verbose $Subst342 $REV
fi


#!/bin/bash
#
# Copyright (c) 2015 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#------------------------------------------------------------------------------
# Make L2FW and L3FW images, their TFTF files, and  FFFF file.
#
# Usage:
#    makef4 {-es2tsb | -es3tsb | -fpgatsb } {-sign} {-v} {-dbg} \
#           {-nocrypto} {-nodelay} {-debugmsg} {-handshake} \
#           {--spec=<num>}{-dme} {-342}
#
#    -es2tsb, -es3tsb, -fpgatsb
#              Select the build target
#    -sign     Sign both level 2 & 3 firmware
#    -dbg      Compile with debugging symbols
#    -v        Verbose mode on TFTF creation
#    -prod     Enable _PRODUCTION mode for all 3 firmware levels
#
# TESTING parameters:
#    -nocrypto		Substitute fake cryptographic routines to speed
#			simulation
#    -gearchange	Test for changing UniPro gear change
#    -debugmsg		Allow debug serial output
#    -handshake		GPIO handshake with simulation/test controller
#    --spec=<num>	Compile special test number <num>.
#    -dme               Enable DME-write logging
#    -342		Substitute the L3FW for L2FW to speed simulation
#------------------------------------------------------------------------------

# Get our build folders from environment variables
source getbuildenv

#-----
# Process any args
#-----
Production=false
Sign=false
DbgMode=false
Testing=false
NoCrypto=false
NoCDelay=false
DebugMessages=false
Handshake=false
Subst342=false
SpecialTest=false
HaveSpecialTest=false

CryptoSuffix="-crypto"
DbgSuffix="-quiet"
HandshakeSuffix=""
DbgModeSuffix="opt"
REV=
for arg in "$@" ; do    # arg will be each positional parameter
    if [[ ${arg} == --spec=* ]]; then
        # Take the next arg as a special test number
        HaveSpecialTest=true
        SpecialTestNum="${arg#*=}"
        Handshake=true  # (Special test implies -handshake)
    elif [[ ${arg} == "-sign" ]]; then    # Sign the 2nd & 3rd level Firmware?
        Sign=true
    elif [[ ${arg} == "-dbg" ]]; then     # Compile with debugging symbols
        DbgMode=true
        DbgModeSuffix="-debug"
    elif [[ ${arg} == "-es2tsb" ]]; then  # select target configuration
        CONFIG_CHIP="es2tsb"
    elif [[ ${arg} == "-es3tsb" ]]; then  # select target configuration
        CONFIG_CHIP="es3tsb"
    elif [[ ${arg} == "-fpgatsb" ]]; then # select target configuration
        CONFIG_CHIP="fpgatsb"
    elif [[ ${arg} == "-prod" ]]; then    # Compile all levels for Toshba Simulation
        Production=true
    elif [[ ${arg} == "-v" ]]; then       # TFTF verbose mode
        Verbose=${arg}
    # Test args
    elif [[ ${arg} == "-nocrypto" ]]; then
        # Substitute fake cryptographic routines to speed simulation
        Testing=true
        NoCrypto=true
        CryptoSuffix="-nc"
    elif [[ ${arg} == "-nodelay" ]]; then
        # Clear only the minimum amount of RAM to speed simulation
        Testing=true
        NoDelay=true
    elif [[ ${arg} == "-debugmsg" ]]; then
        # Allow debug serial output
        Testing=true
        DebugMessages=true
        DbgSuffix="-uart"
    elif [[ ${arg} == "-handshake" ]]; then
        # GPIO handshake with simulation/test controller
        Handshake=true
    elif [[ ${arg} == "-dme" ]]; then
        # Capture DME writes to dbgserial
        DmeLogging=true
    elif [[ ${arg} == "-342" ]]; then
        # Substitute the L3FW for L2FW to speed simulation
        Subst342=true
    elif [[ ${arg} == --rev=* ]]; then
        # --rev is not used for the FFFF, just quietly absorb it so that we
        # don't squawk if passed in by a script passing $*
        REV="${arg}"
    else
        echo "makef4: unknown arg $arg"
        exit 1
    fi
done

# Fill in missing chip
if [ ! $CONFIG_CHIP ]; then
    echo "CONFIG_CHIP not set, assuming $DEFAULT_CHIP_CONFIG"
    CONFIG_CHIP=$DEFAULT_CHIP_CONFIG
fi

# We have GPIO handshake mode if explicitly -handshake or implicitly by -spec
if $Handshake; then
    Testing=true
    HandshakeSuffix="-hs"
fi


if ! $Production; then
    # Export all of the test settings
    if $Testing; then
        export _TESTING=1
    fi
    if $DebugMessages; then
        export _DBGPRINT=1
    fi
    if $DebugMode; then
        export _DEBUG_MODE=1
    fi
    if $NoCrypto; then
        export _NOCRYPTO=1
    fi
    if $NoDelay; then
        export _DISABLE_TIME_CONSUMING_DELAY=1
    fi
    if $Handshake; then
        export _HANDSHAKE=1
    fi
    if $DmeLogging; then
        export _DME_LOGGING=1
    fi
    if $HaveSpecialTest; then
        export _SPECIAL_TEST=$SpecialTestNum
    fi
fi


# Come up with the root name of the FFFF file, ornamented as necessary
if $Sign ; then
    FfffName="ffff-sgn"
else
    FfffName=ffff
fi


pushd $BuildRoot

# Configure for a specific chip/target
echo "Building for $CONFIG_CHIP"
./configure ${CONFIG_CHIP}

# Make our target folder
if [ ! -d ./binary ]
then
    mkdir ./binary
fi


#-----
# Make the s3FW
#-----
echo "Make 3rd stage..."
make clean
make third_stage
if [[ $? == 0 ]]; then
    # s3fw tftf, fake a data section at 0x10010000, which is in the middle of workram
    # so pretty safe to use
    create-tftf --elf $BuildDir/bootrom \
                --data $BuildDir/bootrom.bin --load 0x10010000 \
                --name third --out $BinDir/third.bin \
                --type s3fw \
                --ara-pid 0 --ara-vid 0 $Verbose
    if [[ $? == 0 ]]; then
        # Sign s3fw
        if $Sign; then
            echo "Sign 3rd stage"
            sign-tftf --key $KeyDir/key1.private.pem \
                      --signature-algorithm "rsa2048-sha256" \
                      --type s3fsk \
                      --format es3 \
                      --passin pass:test \
                      $BinDir/third.bin
        fi
    fi
fi
if [[ $? != 0 ]]; then
    echo "Problems creating s3fw"
    popd
    exit 1
fi



#-----
# Make the s2FW
#-----
if $Subst342; then
    echo "Skip making 2nd stage..."
else
    echo "Make 2nd stage..."
    make clean
    make second_stage
    if [[ $? == 0 ]]; then
        # 2ndFW tftf
        create-tftf --elf $BuildDir/bootrom --name second \
                    --type s2fw \
                    --out $BinDir/second.bin --ara-pid 0 --ara-vid 0 $Verbose
        if [[ $? == 0 ]]; then
            # Sign 2nsFW
            if $Sign; then
                echo "Sign 2nd stage"
                ~/bootrom-tools/bin/sign-tftf --key $KeyDir/key1.private.pem \
                      --signature-algorithm "rsa2048-sha256" \
                      --type s3fsk \
                      --format es3 \
                      --passin pass:test \
                      $BinDir/second.bin
            fi
        fi
    fi
    if [[ $? != 0 ]]; then
        echo "Problems creating s2fw"
        popd
        exit 1
    fi
fi




#-----
# Bundle S2FW and S3FW into the FFFF file
#-----
if $Subst342; then
    echo "Make the FFFF (substitute S3FW for S2FW)..."
    create-ffff \
      --s2f $BinDir/third.bin --egen 1 --eloc 0x2000 --name Firmware \
      --out $BinDir/$FfffName.bin --flash-capacity 0x40000 --erase-size 0x800 \
      --image-length 0x8000 --generation 1 --map $Verbose
    if [[ $? != 0 ]]; then
        echo "Problems creating ffff"
        popd
        exit 1
    fi
else
    echo "Make the FFFF..."
    create-ffff \
      --s2f $BinDir/second.bin --egen 1 --eloc 0x2000 \
      --s3f $BinDir/third.bin --egen 1 --eloc 0x6000 --name Firmware \
      --out $BinDir/$FfffName.bin --flash-capacity 0x40000 --erase-size 0x800 \
      --image-length 0x8000 --generation 1 --map $Verbose
    if [[ $? != 0 ]]; then
        echo "Problems creating ffff"
        popd
        exit 1
    fi
fi


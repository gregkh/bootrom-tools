#!/bin/bash
#
# Copyright (c) 2015 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#------------------------------------------------------------------------------
# Make the bootrom image.
#
# Usage:
#    makeboot {-es2tsb | -es3tsb | -fpgatsb } {-v} {-dbg} \
#          {-nocrypto} {-nodelay} {-debugmsg} {-handshake} \
#          {--spec=<num>} {-dme} {-342} --rev=<revision>
#
#    -es2tsb, -es3tsb, -fpgatsb
#              Select the build target
#    -dbg      Compile with debugging symbols and compiler options
#    -v        Verbose mode on TFTF creation
#    -prod     Enable _PRODUCTION mode for all 3 firmware levels
#    --rev=<revision>    The revision in git to build the boot ROM code
#
# TESTING parameters:
#    -nocrypto		Substitute fake cryptographic routines to speed
#			simulation
#    -nodelay		Disable a 100 ms delay after loading from SPI
#    -debugmsg		Allow debug serial output
#    -handshake		GPIO handshake with simulation/test controller
#    --spec=<num>	Compile special test number <num>.
#    -dme               Enable DME-write logging
#    -342		Substitute the L3FW for L2FW to speed simulation
#------------------------------------------------------------------------------
BuildRoot=~/work/bootrom
BuildDir=~/work/bootrom/build
BinDir=~/work/bootrom/binary
KeyDir=~/bin

#-----
# Process any args
#-----
Production=false
DebugMode=false
Testing=false
NoCrypto=false
NoDelay=false
DebugMessages=false
Handshake=false
DmeLogging=false
Subst342=false
SpecialTest=false
HaveSpecialTest=false
REV=
for arg in "$@" ; do    # arg will be each positional parameter
    if [[ ${arg} == --spec=* ]]; then
        # Take the next arg as a special test number
        HaveSpecialTest=true
        SpecialTestNum="${arg#*=}"
        Handshake=true  # (Special test implies -handshake)
    elif [[ ${arg} == "-dbg" ]]; then
        # Compile with debugging DebugMode and compiler option
        DebugMode=true
    elif [[ ${arg} == "-es2tsb" ]]; then  # select target configuration
        CONFIG_CHIP="es2tsb"
    elif [[ ${arg} == "-es3tsb" ]]; then  # select target configuration
        CONFIG_CHIP="es3tsb"
    elif [[ ${arg} == "-fpgatsb" ]]; then # select target configuration
        CONFIG_CHIP="fpgatsb"
    elif [[ ${arg} == "-prod" ]]; then    # Compile all levels for Toshba Simulation
        Production=true
    elif [[ ${arg} == "-v" ]]; then       # TFTF verbose mode
        Verbose=${arg}
    # Test args
    elif [[ ${arg} == "-nocrypto" ]]; then
        # Substitute fake cryptographic routines to speed simulation
        Testing=true
        NoCrypto=true
    elif [[ ${arg} == "-nodelay" ]]; then
        # Disable a 100 ms delay after loading from SPI
        Testing=true
        NoDelay=true
    elif [[ ${arg} == "-debugmsg" ]]; then
        # Allow debug serial output
        Testing=true
        DebugMessages=true
    elif [[ ${arg} == "-handshake" ]]; then
        # GPIO handshake with simulation/test controller
        Handshake=true
    elif [[ ${arg} == "-dme" ]]; then
        # Capture DME writes to dbgserial
        DmeLogging=true
    elif [[ ${arg} == "-342" ]]; then
        # Substitute the L3FW for L2FW to speed simulation
        Subst342=true
    elif [[ ${arg} == --rev=* ]]; then
        REV="${arg#*=}"
    else
        echo "make3: unknown arg $arg"
        exit 1
    fi
done

if [ "${REV}" == "" ]; then
    echo "You have to specify a revision to build the boot ROM code"
    echo "Usage: $(basename $0) --rev=<revision> [-v]"
    exit 1
fi

# Fill in missing chip
if [ ! $CONFIG_CHIP ]; then
    echo "CONFIG_CHIP not set, assuming $DEFAULT_CHIP_CONFIG"
    CONFIG_CHIP=$DEFAULT_CHIP_CONFIG
fi


# We have GPIO handshake mode if explicitly -handshake or implicitly by -spec
if $Handshake; then
    Testing=true
fi


# Export the various settings so that makefile will see them
if ! $Production; then
    # Export all of the test settings
    if $Testing; then
        export _TESTING=1
    fi
    if $DebugMessages; then
        export _DBGPRINT=1
    fi
    if $DebugMode; then
        export _DEBUG_MODE=1
    fi
    if $NoCrypto; then
        export _NOCRYPTO=1
    fi
    if $NoDelay; then
        export _DISABLE_TIME_CONSUMING_DELAY=1
    fi
    if $Handshake; then
        export _HANDSHAKE=1
    fi
    if $DmeLogging; then
        export _DME_LOGGING=1
    fi
    if $HaveSpecialTest; then
        export _SPECIAL_TEST=$SpecialTestNum
    fi
fi


pushd $BuildRoot

git checkout ${REV}
if [ $? != 0 ]; then
    echo "No revision "${REV}" in "${BuildRoot}
    exit 1
fi

# Configure for a specific chip/target
echo "Building for $CONFIG_CHIP"
./configure ${CONFIG_CHIP}

# Make our target folder
if [ ! -d ./binary ]
then
    mkdir ./binary
fi


#-----
# Make the s1FW (aka BootRom)
#-----
echo "Make 1st stage FW (BootRom)..."
make clean
make

git checkout master

if [[ $? != 0 ]]; then
    echo "Problems creating s1fw"
    popd
    exit 1
else
    echo "Created build/bootrom.bin et al"
fi


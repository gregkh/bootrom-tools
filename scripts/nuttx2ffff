#!/bin/bash
#
# Copyright (c) 2015 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#------------------------------------------------------------------------------
# Package a nuttx image into an ffff
#------------------------------------------------------------------------------
#
# Usage:
#    nuttx2ffff {-v} {--build=name} {-outdir=<dir>}
#
#    -v        Verbose mode on TFTF creation
#    --build   Which nuttx image to use:
#               ara-bridge-es2-debug-apbridgea | ara-bridge-es2-debug-generic |
#               (ara-svc-db3) | ara-bridge-es2-debug-bringup | ara-svc-bdb2a |
#               ara-svc-sdb
#------------------------------------------------------------------------------

# Get our build folders from environment variables
source getbuildenv

verbose=
nuttx_build=
for arg in "$@" ; do    # arg will be each positional parameter
    if [[ ${arg} == "-v" ]]; then
        verbose=${arg}
    elif [[ ${arg} == --build=* ]]; then
        nuttx_build="${arg#*=}"
    fi
done

if [ ${nuttx_build} ]; then
    # Construct a canonical the path from the supplied build path or fragment
    # (e.g., "ara-bridge-es2-debug-generic" or
    # "~/nuttx/build/ara-bridge-es2-debug-generic").
    nuttx_build=`basename ${nuttx_build}`
    NuttX_build=`readlink -f $NUTTXROOT/../build`
    NUTTX_IMAGE=$NuttX_build/$nuttx_build/image
else
    NUTTX_IMAGE=$NUTTXROOT
fi
echo "Packaging ${NUTTX_IMAGE}/nuttx"


if [ ! -f ${NUTTX_IMAGE}/nuttx ]; then
    echo "Error: Can't find ${NUTTX_IMAGE}/nuttx"
    exit 1
fi
if [ ! -f ${NUTTX_IMAGE}/System.map ]; then
    echo "Error: Can't find ${NUTTX_IMAGE}/System.map"
    exit 1
fi


# Extract the start address by hunting for the "Reset_Handler" symbol in
# the System.map file
start=`grep Reset_Handler ${NUTTX_IMAGE}/System.map | head -c 8`
if [ ! ${start} ]; then
    echo "Couldn't find Reset_Handler"
    start=`hexdump -n 4 -e '1/4 "%08x"' ${NUTTX_IMAGE}/System.map`
    echo "Extracted start address from reset vector"
fi

#echo
#echo "Package ${NUTTX_IMAGE}/nuttx into nuttx.tftf:"
echo "start address: 0x$start"

create-tftf \
  $verbose \
  --header-size 0x200 \
  --type s2fw \
  --name "NuttX S3FW-as-S2FW" \
  --elf ${NUTTX_IMAGE}/nuttx \
  --start 0x$start \
  --out ${NUTTX_IMAGE}/nuttx.tftf

if [[ $? != 0 ]]; then
    echo "There were problems creating the TFTF"
    exit 1
fi

#echo
#echo "Package nuttx.tftf into nuttx.ffff:"

create-ffff \
  $verbose \
  --header-size 0x1000 \
  --generation 1  \
  --flash-capacity 0x40000 \
  --image-length 0x40000 \
  --erase-size 0x800 \
  --name "Nuttx test build" \
  --s2f ${NUTTX_IMAGE}/nuttx.tftf --eloc 0x2000 --egen 1 \
  --out ${NUTTX_IMAGE}/nuttx.ffff


if [[ $? != 0 ]]; then
    echo "There were problems creating the FFFF"
    # Cleanup intermediate files
    rm ${NUTTX_IMAGE}/nuttx.tftf
    exit 1
fi

# Resize the FFFF to the Flash
truncate -s 2M ${NUTTX_IMAGE}/nuttx.ffff

# Cleanup intermediate files
rm ${NUTTX_IMAGE}/nuttx.tftf

echo "Done"



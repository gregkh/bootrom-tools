#!/bin/bash
#
# Copyright (c) 2015 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#------------------------------------------------------------------------------
# Package a nuttx image into an ffff
#------------------------------------------------------------------------------

function usage ()
{
    echo "Usage:
   ${0} {-v} [{--in=file} | {--build=name}] {--outdir=<dir>} {--help}

   -v        Verbose mode on TFTF creation
   --help    This message
   --in      Arbitrary path to a nuttx file, in ELF format
   --target  \"apb\" for APBridge targets, \"gpb\" for GPBridge
   --outdir  Output directory for the FFFF file.
             If missing, the same directory as the NuttX image is used.
   If neither --in or --build are specified, it will use the image in
   \$NUTTXROOT/nuttx.
"
    exit 1

}

TOSHIBA_MIPI_MID=0x0126
verbose=n
target=
help=false

function vecho () {
    if [ ${verbose} = y ]; then
        echo $@
    fi
}

for arg in "$@" ; do    # arg will be each positional parameter
    if [[ ${arg} == "-v" ]]; then
        verbose=y
    elif [[ ${arg} == --target=* ]]; then
        target="${arg#*=}"
    elif [[ ${arg} == --in=* ]]; then
        NUTTX_IMAGE="${arg#*=}"
    elif [[ ${arg} == --outdir=* ]]; then
        OUTDIR="${arg#*=}"
    elif [[ ${arg} == "--help" ]]; then   # Issue usage message
        help=true
     fi
done

# Usage?
if $help; then
    usage
fi

# Argument sanitizing and validation
if [ ! ${target} ]; then
    >&2 echo Error: missing mandatory --target option.
    >&2 usage
fi
case $target in
    apb) ;;
    gpb) ;;
    *)
        >&2 echo Invalid target: $target
        >&2 usage
esac

if [ ! ${NUTTX_IMAGE} ]; then
    NUTTX_IMAGE=$NUTTXROOT/nuttx
fi

if [ ! ${OUTDIR} ]; then
    OUTDIR=$(dirname ${NUTTX_IMAGE})
fi

mkdir -p ${OUTDIR}

case ${target} in
    apb)
        target_long="ES3 APBridge"
        pid=0x1001
        ;;
    gpb)
        target_long="ES3 GPBridge"
        pid=0x1002
        ;;
esac

if [ ! -f ${NUTTX_IMAGE} ]; then
    >&2 echo "Error: Can't find ${NUTTX_IMAGE}"
    exit 1
fi

tftf_tmp=$(mktemp --suffix=.tftf)
ffff_name=$(basename ${NUTTX_IMAGE})-${target}.ffff
ffff_file=${OUTDIR}/${ffff_name}

vecho "NuttX image: ${NUTTX_IMAGE}"
vecho "Output FFFF: ${ffff_file}"
vecho "FFFF Target: ${target_long}"

create-tftf \
    $verbose \
    --header-size 0x200 \
    --type s2fw \
    --name "NuttX S3FW-as-S2FW" \
    --unipro-mfg=${TOSHIBA_MIPI_MID} \
    --unipro-pid=${pid} \
    --elf ${NUTTX_IMAGE} \
    --start-sym Reset_Handler \
    --out ${tftf_tmp} &>/dev/null

if [[ $? != 0 ]]; then
    echo "Can't create the TFTF"
    exit 1
fi

create-ffff \
    $verbose \
    --header-size 0x1000 \
    --generation 1  \
    --flash-capacity 0x40000 \
    --image-length 0x40000 \
    --erase-size 0x800 \
    --name "Nuttx test build" \
    --s2f ${tftf_tmp} --eloc 0x2000 --egen 1 \
    --out ${ffff_file} &>/dev/null


if [[ $? != 0 ]]; then
    >&2 echo "Error: can't create the FFFF"
    # Cleanup intermediate files
    rm ${tftf_tmp}
    exit 1
fi

# Cleanup intermediate files
rm ${tftf_tmp}

# Resize the FFFF to the Flash
truncate -s 2M ${ffff_file}

vecho "Done"



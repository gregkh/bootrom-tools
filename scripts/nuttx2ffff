#!/bin/bash
#
# Copyright (c) 2015 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#------------------------------------------------------------------------------
# Package a nuttx image into an ffff
#------------------------------------------------------------------------------
#
# Usage:
#    nuttx2ffff {-v} [{--in=file} | {--build=name}] {-outdir=<dir>} {--help}
#
#    -v        Verbose mode on TFTF creation
#    --help    Display usage
#    --in      Arbitrary path to a nuttx file
#    --build   Which nuttx image to use:
#               ara-bridge-debug-apbridgea | ara-bridge-debug-generic |
#               ara-bridge-debug-bringup
#    If neither --in or --build are specified, it will use the image in
#    .../nuttx/nuttx
#------------------------------------------------------------------------------

verbose=
nuttx_build=
help=false
for arg in "$@" ; do    # arg will be each positional parameter
    if [[ ${arg} == "-v" ]]; then
        verbose=${arg}
    elif [[ ${arg} == --build=* ]]; then
        nuttx_build="${arg#*=}"
    elif [[ ${arg} == --in=* ]]; then
        NUTTX_IMAGE="${arg#*=}"
    elif [[ ${arg} == "--help" ]]; then   # Issue usage message
        help=true
     fi
done

# Usage?
if $help; then
echo "Usage:
   nuttx2ffff {-v} [{--in=file} | {--build=name}] {-outdir=<dir>} {--help}

   -v        Verbose mode on TFTF creation
   --help    This message
   --in      Arbitrary path to a nuttx file
   --build   Which nuttx image to use:
              ara-bridge-debug-apbridgea | ara-bridge-debug-generic |
              ara-bridge-debug-bringup
   If neither --in or --build are specified, it will use the image in
   .../nuttx/nuttx
"
    exit 1
fi

if [ ! ${NUTTX_IMAGE} ]; then
    if [ ${nuttx_build} ]; then
        # Construct a canonical the path from the supplied build path or fragment
        # (e.g., "ara-bridge-debug-generic" or
        # "~/nuttx/build/ara-bridge-debug-generic").
        nuttx_build=`basename ${nuttx_build}`
        NuttX_build=`readlink -f $NUTTXROOT/../build`
        NUTTX_IMAGE=$NuttX_build/$nuttx_build/image/nuttx
        echo "nuttx image from --build"
    else
        NUTTX_IMAGE=$NUTTXROOT/nuttx
        echo "nuttx image from default"
    fi
fi

case ${nuttx_build} in
    ara-bridge-debug-apbridgea)
        mids=(0x0126 0x0126)
        pids=(0x1000 0x1001)
        bridge_names=(apb1-es2 apb1-es3)
        ;;
    ara-bridge-debug-generic | ara-bridge-debug-bringup)
        mids=(0x0126 0x0126 0x0126 0x0126)
        pids=(0x1000 0x1000 0x1001 0x1002)
        bridge_names=(apb2-es2 gpb-es2 apb2-es3 gpb-es3)
        ;;
esac

echo "Packaging ${NUTTX_IMAGE}"


if [ ! -f ${NUTTX_IMAGE} ]; then
    echo "Error: Can't find ${NUTTX_IMAGE}"
    exit 1
fi

#echo
#echo "Package ${NUTTX_IMAGE}/nuttx into nuttx.tftf:"
#echo "start address: 0x$start"

for i in ${!mids[*]}; do
    create-tftf \
      $verbose \
      --header-size 0x200 \
      --type s2fw \
      --name "NuttX S3FW-as-S2FW" \
      --unipro-mfg=${mids[i]} \
      --unipro-pid=${pids[i]} \
      --elf ${NUTTX_IMAGE} \
      --start-sym Reset_Handler \
      --out ${NUTTX_IMAGE}.tftf

    if [[ $? != 0 ]]; then
        echo "There were problems creating the TFTF"
        exit 1
    fi

    tftf_name=$(printf "ara:%.8x:%.8x:%.8x:%.8x:02.tftf" ${mids[i]} ${pids[i]} \
                0 0)

    create-ffff \
      $verbose \
      --header-size 0x1000 \
      --generation 1  \
      --flash-capacity 0x40000 \
      --image-length 0x40000 \
      --erase-size 0x800 \
      --name "Nuttx test build" \
      --s2f ${NUTTX_IMAGE}.tftf --eloc 0x2000 --egen 1 \
      --out ${NUTTX_IMAGE}-${mids[i]}-${pids[i]}.ffff


    if [[ $? != 0 ]]; then
        echo "There were problems creating the FFFF"
        # Cleanup intermediate files
        rm ${NUTTX_IMAGE}.tftf
        exit 1
    fi

    # Resize the FFFF to the Flash
    truncate -s 2M ${NUTTX_IMAGE}-${mids[i]}-${pids[i]}.ffff

    # Cleanup intermediate files
    mv ${NUTTX_IMAGE}.tftf $(dirname ${NUTTX_IMAGE})/$tftf_name
done

echo "Done"



#!/bin/bash
#
# Copyright (c) 2015 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#------------------------------------------------------------------------------
# Make the FFFF file and create an es3-test folder containing the test suite
# resources
#
# Usage:
#    makeall {-es2tsb | -es3tsb | -fpgatsb } {-v} {-justboot} {-zip} \
#          {-nocrypto} {-nodelay} {-debugmsg} {-handshake} \
#          {--spec=<num>} {-dme} {-342} --rev=<revision>
#
#    -es2tsb, -es3tsb, -fpgatsb
#		Select the build target
#    -v		Verbose mode on TFTF creation
#    -justboot	Normally, makeall will clear the drop folder before
#		updating it with the server, bootrom, FFFF images and all
#		the rest of the test suite files. Since the server and FFFF
#		images need only be built once, and because makeall is called
#		by makedrop for each of the bootrom images, -justboot is set
#		on all but the first invocation, which speeds the generation
#		of the drop and prevents the bootrom builds from unnecessary
#		recompilation.
#    -zip	Tells makeall to generate a zip archive of the (interim)
#		drop folder.
#    --rev=<revision>    The revision in git to build the boot ROM code
#
# TESTING parameters:
#    -nocrypto		Substitute fake cryptographic routines to speed
#			simulation
#    -debugmsg		Allow debug serial output
#    -handshake		GPIO handshake with simulation/test controller
#    --spec=<num>	Compile special test number <num>.
#    -dme               Enable DME-write logging
#    -342		Substitute the L3FW for L2FW to speed simulation
#------------------------------------------------------------------------------

# Get our build folders from environment variables
source getbuildenv

Zip=false
HaveSpecialTest=false
JustBootrom=false
CryptoSuffix="-crypto"
DbgSuffix="-quiet"
HandshakeSuffix=""
DbgModeSuffix="-opt"
Ornamentation=$(bootsuffix $*)

REV=
#-----
# Process args
#-----
for arg in "$@" ; do    # arg will be each positional parameter
    if [[ ${arg} == --spec=* ]]; then
        # --rev is not used for the FFFF, just quietly absorb it so that we
        # don't squawk if passed in by a script passing $*
        SpecialTest="${arg}"
        HaveSpecialTest=true
        Handshake=true  # (Special test implies -handshake)
    elif [[ ${arg} == "-justboot" ]]; then  # select target configuration
        JustBootrom=true
    elif [[ ${arg} == "-es2tsb" ]]; then  # select target configuration
        CONFIG_CHIP="es2tsb"
    elif [[ ${arg} == "-es3tsb" ]]; then  # select target configuration
        CONFIG_CHIP="es3tsb"
    elif [[ ${arg} == "-fpgatsb" ]]; then # select target configuration
        CONFIG_CHIP="fpgatsb"
    elif [[ ${arg} == "-prod" ]]; then    # Production version
        Production=${arg}
    elif [[ ${arg} == "-v" ]]; then       # TFTF verbose mode
        Verbose="${arg} "
    elif [[ ${arg} == "-dbg" ]]; then     # Build with debugging symbols
        DbgMode="${arg} "
        DbgModeSuffix="-debug"
    elif [[ ${arg} == "-zip" ]]; then     # enable zip file generation
        Zip=true
    # Test args
    elif [[ ${arg} == "-nocrypto" ]]; then
        # Substitute fake cryptographic routines to speed simulation
        NoCrypto="${arg} "
        CryptoSuffix="-nc"
    elif [[ ${arg} == "-nodelay" ]]; then
        # Clear only the minimum amount of RAM to speed simulation
        NoDelay="${arg} "
    elif [[ ${arg} == "-debugmsg" ]]; then
        # Allow debug serial output
        DebugMessages="${arg} "
        DbgSuffix="-uart"
    elif [[ ${arg} == "-handshake" ]]; then
        # GPIO handshake with simulation/test controller
        Handshake="${arg} "
    elif [[ ${arg} == "-dme" ]]; then
        # Capture DME writes to dbgserial
        DmeLogging="${arg} "
    elif [[ ${arg} == "-342" ]]; then
        # Substitute the L3FW for L2FW to make simulation quicker
        Subst342="${arg} "
    elif [[ ${arg} == --rev=* ]]; then
        REV="${arg#*=}"
    else
        echo "Makeall: unknown arg $arg"
        exit 1
    fi
done

if [ "${REV}" == "" ]; then
    echo "You have to specify a revision to build the boot ROM code"
    echo "Usage: $(basename $0) --rev=<revision> [-v]"
    exit 1
fi

# Fill in missing chip
if [ ! $CONFIG_CHIP ]; then
    echo "CONFIG_CHIP not set, assuming $DEFAULT_CHIP_CONFIG"
    CONFIG_CHIP=$DEFAULT_CHIP_CONFIG
fi

# Parlay the chip into a bootrom suffix component
if [[ $CONFIG_CHIP == "es2tsb" ]]; then  # select target configuration
    ChipSuffix="-es2"
elif [[ $CONFIG_CHIP == "es3tsb" ]]; then  # select target configuration
    ChipSuffix=""  # default
elif [[ $CONFIG_CHIP == "fpgatsb" ]]; then # select target configuration
    ChipSuffix="-fpga"
else
    echo "Unknown chip: $CONFIG_CHIP"
    exit 1
fi

# Give some indication of what "special-test N" is
if $HaveSpecialTest; then
    if [[ ${SpecialTestNum} == 1 ]]; then
        Blurb="Allow 3rd stage FW to try to put the chip into standby"
    elif [[ ${SpecialTestNum} == 2 ]]; then
        Blurb="STANDBY_TEST plus 3rd stage FW waits for the server to put UniPro to hibern8 mode before suspend"
    elif [[ ${SpecialTestNum} == 3 ]]; then
        Blurb="Run the SpiRom at different gear speeds"
    fi
    echo "-spec ${SpecialTestNum}: ${Blurb}"
fi


# Make sure our target folder exists
if [ ! -d $AssyDir ]
then
    echo "Creating assembly folder: $AssyDir"
    mkdir $AssyDir
fi
if [ ! -d $AssyDir/ffff ]
then
    mkdir $AssyDir/ffff
fi
if [ ! -d $AssyDir/ctrl-files ]
then
    mkdir $AssyDir/ctrl-files
fi
if [ ! -d $AssyDir/response-files ]
then
    mkdir $AssyDir/response-files
fi
if [ ! -d $AssyDir/response-dme ]
then
    mkdir $AssyDir/response-dme
fi
if [ ! -d $AssyDir/s1fw ]
then
    mkdir $AssyDir/s1fw
fi


# Compose the bulk of our "makef4 and "makeboot" arguments
F4Args="-$CONFIG_CHIP $Production -dbg -nocrypto -debugmsg -handshake "
F4Args="$F4Args$NoDelay$DmeLogging$Subst342$Verbose"
StdArgs="-$CONFIG_CHIP $NoCrypto$NoDelay$DebugMessages$DbgMode"
StdArgs="$StdArgs$Production$DmeLogging$Subst342$Verbose"
if $HaveSpecialTest; then
    StdArgs="$StdArgs $SpecialTest"
else
    StdArgs="$StdArgs $Handshake"
fi



pushd $BuildRoot

#-----
# Build the components that only need to be built once
#-----
if ! $JustBootrom; then
    # GBBOOT server build
    echo "--"
    echo "Building the GBBOOT server"
    echo "--"
    makeserver $StdArgs
    if [[ $? == 0 ]]; then
        mv $BuildDir/gbboot_server.bin $AssyDir/s1fw/gbboot_server$Ornamentation.bin
        if [ -f $BuildDir/gbboot_server.hex ]; then
          mv $BuildDir/gbboot_server.hex $AssyDir/s1fw/gbboot_server$Ornamentation.hex
        fi
        mv $BuildDir/bromcAP.dat $AssyDir/s1fw/bromcAP-gbboot$Ornamentation.dat
        mv $BuildDir/bromcGP.dat $AssyDir/s1fw/bromcGP-gbboot$Ornamentation.dat
    else
        echo "Problems building GBBoot server"
        popd
        exit 1
    fi

    # Build untrusted (non-signed) FFFF
    echo "--"
    echo "Building the Untrusted (non-signed) image"
    echo "--"
    makef4 $F4Args
    if [[ $? == 0 ]]; then
        mv $BinDir/ffff.bin $AssyDir/ffff
        mv $BinDir/ffff.map $AssyDir/ffff
    else
        echo "Problems building unsigned FFFF"
        popd
        exit 1
    fi

    # Build trusted (signed) FFFF
    echo "--"
    echo "Building the Trusted (signed) image"
    echo "--"
    makef4 $F4Args -sign
    if [[ $? == 0 ]]; then
        mv $BinDir/ffff-sgn.bin $AssyDir/ffff
        mv $BinDir/ffff-sgn.map $AssyDir/ffff
    else
        echo "Problems building signed FFFF"
        popd
        exit 1
    fi

    # Build untrusted (non-signed) FFFF
    echo "--"
    echo "Building the Untrusted (non-signed) image for standby test"
    echo "--"
    makef4 $F4Args
    if [[ $? == 0 ]]; then
        mv $BinDir/ffff.bin $AssyDir/ffff/ffff.standby.bin
        mv $BinDir/ffff.map $AssyDir/ffff/ffff.standby.map
    else
        echo "Problems building unsigned FFFF"
        popd
        exit 1
    fi

    # Build trusted (signed) FFFF
    echo "--"
    echo "Building the Trusted (signed) image for standby test"
    echo "--"
    makef4 $F4Args -sign
    if [[ $? == 0 ]]; then
        mv $BinDir/ffff-sgn.bin $AssyDir/ffff/ffff-sgn.standby.bin
        mv $BinDir/ffff-sgn.map $AssyDir/ffff/ffff-sng.standby.map
    else
        echo "Problems building signed FFFF"
        popd
        exit 1
    fi

fi


#-----
# Build Bootrom
#-----
echo "--"
echo "Building the Trusted (signed) image"
echo "--"
makeboot $StdArgs --rev=${REV}
if [[ $? == 0 ]]; then
    mv $BuildDir/bootrom.bin $AssyDir/s1fw/bootrom$Ornamentation.bin
    if [ -f $BuildDir/bootrom.hex ]; then
        mv $BuildDir/bootrom.hex $AssyDir/s1fw/bootrom$Ornamentation.hex
    fi
    mv $BuildDir/bromcAP.dat $AssyDir/s1fw/bromcAP$Ornamentation.dat
    mv $BuildDir/bromcGP.dat $AssyDir/s1fw/bromcGP$Ornamentation.dat
else
    echo "Problems building signed FFFF"
    popd
    exit 1
fi



#-----
# (Re)create the drop folder from the pieces in the assembly folder
#-----
# Make sure our drop folder exists
if ! $JustBootrom; then
    if [ -d $DropDir ]
    then
        echo "Removing old drop folder: $DropDir"
        rm -r $DropDir
    fi
fi

if [ ! -d $DropDir ]
then
    echo "Creating drop folder: $DropDir"
    mkdir $DropDir
fi
if [ ! -d $DropDir/efuse ]
then
    mkdir $DropDir/efuse
fi
if [ ! -d $DropDir/ffff ]
then
    mkdir $DropDir/ffff
fi
if [ ! -d $DropDir/ctrl-files ]
then
    mkdir $DropDir/ctrl-files
fi
if [ ! -d $DropDir/response-files ]
then
    mkdir $DropDir/response-files
fi
if [ ! -d $DropDir/response-dme ]
then
    mkdir $DropDir/response-dme
fi
if [ ! -d $DropDir/s1fw ]
then
    mkdir $DropDir/s1fw
fi

# Populate the drop folder
cp $AssyDir/efuse/* $DropDir/efuse
cp $AssyDir/ffff/* $DropDir/ffff
cp $AssyDir/ctrl-files/*.ctrl $DropDir/ctrl-files
cp $AssyDir/response-files/*.rsp $DropDir/response-files
cp $AssyDir/response-dme/*.rsp $DropDir/response-dme
cp $AssyDir/s1fw/* $DropDir/s1fw



# Generate the test files in the drop folder
create-bootrom-test-suite \
  --bin $AssyDir/s1fw/bootrom$Ornamentation.bin \
  --flash $AssyDir/ffff/ffff-sgn.bin \
  --tss $AssyDir/es3.tss \
  --test trusted$Ornamentation.ts \
  --out_folder $DropDir/ffff
if [[ $? != 0 ]]; then
    echo "Problems creating trusted testsuite"
    popd
    exit 1
fi

create-bootrom-test-suite \
  --bin $AssyDir/s1fw/bootrom$Ornamentation.bin \
  --flash $AssyDir/ffff/ffff.bin \
  --tss $AssyDir/es3.tss \
  --test untrusted$Ornamentation.ts \
  --out_folder $DropDir/ffff
if [[ $? != 0 ]]; then
    echo "Problems creating untrusted testsuite"
    popd
    exit 1
fi


# Create the .hex files for all of the ffff variants
echo "Generating ffff .hex files..."
pushd $DropDir/ffff
for f in *.bin
do
    FBase=`basename $f .bin`
    hexdump -v -e '/1 "%02X\n"' $FBase.bin > $FBase.hex 
done
popd


if $Zip; then
    # Zip it all up
    echo "Generating drop..."
    if [[ "${Production}" == "-prod" ]]; then
        Archive="`date +%Y%m%d-%H%M-%Z`.es3-test-prod.tar.gz"
    else
        Archive="`date +%Y%m%d-%H%M-%Z`.es3-test.tar.gz"
    fi
    tar -zcvf ~/$Archive $DropDir
    echo "Dropped to ~/$Archive"
fi

# Done
popd


#! /usr/bin/env python

#
# Copyright (c) 2015 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

from __future__ import print_function
import os.path
import sys
import argparse
import errno
from tftf import Tftf, TFTF_SECTION_TYPE_RAW_CODE, \
    TFTF_SECTION_TYPE_RAW_DATA, TFTF_SECTION_TYPE_MANIFEST, \
    TFTF_SECTION_TYPE_SIGNATURE, TFTF_SECTION_TYPE_CERTIFICATE, \
    DATA_ADDRESS_TO_BE_IGNORED, TFTF_HDR_NUM_SECTIONS, \
    TFTF_HEADER_SIZE_MIN, TFTF_HEADER_SIZE_MAX, TFTF_HEADER_SIZE_DEFAULT
from ffff_element import FFFF_ELEMENT_STAGE2_FIRMWARE_PACKAGE, \
    FFFF_ELEMENT_STAGE3_FIRMWARE_PACKAGE, FFFF_ELEMENT_IMS_CERTIFICATE, \
    FFFF_ELEMENT_CMS_CERTIFICATE, FFFF_ELEMENT_DATA
from util import error, warning
import io
from elftools.elf.elffile import ELFFile
from elftools.elf.enums import ENUM_SH_TYPE

DEFAULT_ARA_BOOT_STAGE = 2
DEFAULT_ARA_VID = 0
DEFAULT_ARA_PID = 0

# Flag to indicate that the last arg parsed was a section type, which
# means that an optional section parameters are now legal.
allow_section_parameters = False

# Flag (effective only when allow_section_parameters is True) indicating that
# the --load option is disallowed for that section type.
restricted_address = False

# Flag indicating that a restricted section (i.e., signature or certificate)
# has been parsed. No data or code sections are allowed to follow them.
code_data_blocked = False

# Flag indicating that the user specified a code or data section after a
# restricted section.
code_data_while_blocked = False


package_types = {
    "s2fw": FFFF_ELEMENT_STAGE2_FIRMWARE_PACKAGE,
    "s3fw": FFFF_ELEMENT_STAGE3_FIRMWARE_PACKAGE,
    "icert": FFFF_ELEMENT_IMS_CERTIFICATE,
    "ccert": FFFF_ELEMENT_CMS_CERTIFICATE,
    "data": FFFF_ELEMENT_DATA,
}

package_names = {
    FFFF_ELEMENT_STAGE2_FIRMWARE_PACKAGE: "s2fw",
    FFFF_ELEMENT_STAGE3_FIRMWARE_PACKAGE: "s3fw",
    FFFF_ELEMENT_IMS_CERTIFICATE: "icert",
    FFFF_ELEMENT_CMS_CERTIFICATE: "ccert",
    FFFF_ELEMENT_DATA: "data",
}



# the list of sections
sections = []

def package_name(package_type):
    # Convert package type into textual form
    if package_type in package_names:
        return package_names[element_type]
    else:
        return "?"

def package_type(package_name):
    # Convert package name into a package_type
    if package_name in package_types:
        return package_types[package_name]
    else:
        return "?"

def auto_int(x):
    # Workaround to allow hex numbers to be entered for numeric arguments.
    return int(x, 0)


class SectionAction(argparse.Action):
    """argparse custom action for handling elements and subparameters"""

    def __call__(self, parser, namespace, values, option_string=None):
        global allow_section_parameters, sections
        global restricted_address, code_data_blocked, code_data_while_blocked
        if option_string in "--load --class --id":
            if not allow_section_parameters:
                error(option_string,
                      "can only follow --code, --data or --manifest")
            else:
                if option_string == "--load":
                    if restricted_address:
                        warning(option_string,
                                "is ignored for --signature and --certificate")
                    else:
                        sections[-1]['load'] = values
                elif option_string == "--class":
                    sections[-1]['class'] = values
                elif option_string == "--id":
                    sections[-1]['id'] = values
        else:
            # Close the window on section load addresses
            allow_section_parameters = False
            restricted_address = False

            # Handle the specific file type. In all cases, we stage the
            # section in a temporary holding variable to allow the
            # optional "--load_address" to be added to it.
            if option_string == "--code":
                if code_data_blocked:
                    error(option_string,
                          "cannot follow --signature or --certificate")
                    code_data_while_blocked = True
                else:
                    sections.append({'type': TFTF_SECTION_TYPE_RAW_CODE,
                                     'file': values})
                allow_section_parameters = True
            elif option_string == "--data":
                if code_data_blocked:
                    error(option_string,
                          "cannot follow --signature or --certificate")
                    code_data_while_blocked = True
                else:
                    sections.append({'type': TFTF_SECTION_TYPE_RAW_DATA,
                                     'file': values})
                allow_section_parameters = True
            elif option_string == "--manifest":
                sections.append({'type': TFTF_SECTION_TYPE_MANIFEST,
                                 'file': values})
                allow_section_parameters = True
            elif option_string == "--signature":
                sections.append({'type': TFTF_SECTION_TYPE_SIGNATURE,
                                 'file': values,
                                 'load': DATA_ADDRESS_TO_BE_IGNORED})
                allow_section_parameters = True
                restricted_address = True
                code_data_blocked = True
            elif option_string == "--certificate":
                sections.append({'type': TFTF_SECTION_TYPE_CERTIFICATE,
                                 'file': values,
                                 'load': DATA_ADDRESS_TO_BE_IGNORED})
                allow_section_parameters = True
                restricted_address = True
                code_data_blocked = True
            else:
                print("Unknown option '", option_string, "'")


class ElfFileAction(argparse.Action):
    """argparse custom action for handling ELF image files"""

    def __call__(self, parser, namespace, values, option_string=None):
        global sections
        try:
            with io.open(values, 'rb') as elf_file:
                image = ELFFile(elf_file)
                elf_sections = []
                code_section = image.get_section_by_name('.text')
                if code_section:
                    namespace.load = code_section['sh_addr']
                    elf_sections.append({'type': TFTF_SECTION_TYPE_RAW_CODE,
                                        'load': code_section['sh_addr'],
                                        'buffer': code_section.data()})
                data_section = image.get_section_by_name('.data')
                if data_section:
                    elf_sections.append({'type': TFTF_SECTION_TYPE_RAW_DATA,
                                        'load': data_section['sh_addr'],
                                        'buffer': data_section.data()})
                assert(code_section is not None or data_section is not None)
                sections += elf_sections
                if namespace.start == 0:
                    namespace.entry = image['e_entry']
                namespace.elf = values
        except IOError as e:
            error(option_string, " must be followed by an ELF image!")
        except Exception as e:
            error(e)


def elf_get_symbol_addr(elf, sym):
    with io.open(elf, 'rb') as elf_file:
        image = ELFFile(elf_file)
        for section in image.iter_sections():
            if section['sh_type'] == 'SHT_SYMTAB':
                for symbol in section.iter_symbols():
                    if symbol.name == sym:
                        return symbol.entry['st_value']
    return None


def balance_vidpid(vidpid, name):
    # Vendors have been told to use 15-bit MIDs, VIDs and PIDs, but the
    # bootrom requires Hamming-balanced values. The workaround is to copy
    # the 1s compliment of the lower 16 bits into the upper 16 bits.
    if vidpid != 0:
        if vidpid <= 0x00007fff:
            old_vidpid = vidpid
            #vidpid |= ~vidpid << 16
            vidpid = (vidpid | ~vidpid << 16) & 0xffffffff
            warning("{0:s} upconverted from {1:08x} to {2:08x}".
                    format(name, old_vidpid, vidpid))
        else:
            # 32-bit MID/VID/PID: Check for a valid Hamming weight
            if bin(vidpid).count('1') != 16:
               raise ValueError("{0:s} ({1:08x}) has an invalid Hamming weight".
                               format(name, vidpid))
    return vidpid


def validate_args(args, sections):
    # Sanity-check the command line args and return a "valid" flag
    success = True
    if not sections:
        error("You need at least one --code, --data, --manifest or --elf!")
        success = False

    # Valdate the header size
    if (args.header_size < TFTF_HEADER_SIZE_MIN) or \
       (args.header_size > TFTF_HEADER_SIZE_MAX):
        error("--header_size is out of range ({0:d}-{1:d})".
              format(TFTF_HEADER_SIZE_MIN, TFTF_HEADER_SIZE_MAX))
        success = False
    if (args.header_size % 4) != 0:
        error("--header_size must be a multiple of 4")
        success = False

    if len(sections) > TFTF_HDR_NUM_SECTIONS:
        error("Too many sections -", TFTF_HDR_NUM_SECTIONS, "max.")
        success = False
    if args.start < 0 or args.start > 0xffffffff:
        error("--start is out of range")
        success = False
    if args.unipro_mfg < 0 or args.unipro_mfg > 0xffffffff:
        error("--unipro_mfg is out of range")
        success = False
    if args.unipro_pid < 0 or args.unipro_pid > 0xffffffff:
        error("--unipro_pid is out of range")
        success = False
    if args.ara_vid < 0 or args.ara_vid > 0xffffffff:
        error("Error: --ara_vid is out of range")
        success = False
    if args.ara_pid < 0 or args.ara_pid > 0xffffffff:
        error("--ara_pid is out of range")
        success = False
    if args.ara_stage < 1 or args.ara_stage > 3:
        error("--ara-stage is out of range")
        success = False
    unbalanced_ara_vid = args.ara_vid
    unbalanced_ara_pid = args.ara_pid
    if not args.no_hamming_balance:
        try:
            args.ara_vid = balance_vidpid(unbalanced_ara_vid, "Ara VID")
            args.ara_pid = balance_vidpid(unbalanced_ara_pid, "Ara PID")
        except ValueError as e:
            error(e)
            success = False


    if not args.out:
        args.out = 'ara:{:08x}:{:08x}:{:08x}:{:08x}:{:02x}.tftf'.format(
                   args.unipro_mfg, args.unipro_pid, unbalanced_ara_vid,
                   unbalanced_ara_pid, args.ara_stage)

    if args.outdir:
        args.out = os.path.join(args.outdir, args.out)

    # TODO: Other checks TBD
    return success


def main():
    """Application for creating Trusted Firmware Transfer Format (TFTF) files

    This is covered in detail in "ES3 Bridge ASIC Boot ROM High Level Design".

    Usage: create-tftf --start <num> --out <file> {--header-size <num>} \
           {--name <string>} {--unipro-mfg} {--unipro-pid} \
           {--ara-vid} {--ara-pid} {--ara-stage} {--elf <file>} \
           {-v | --verbose} {--map} {--header-size} {--no-hamming-balance} \
           [<section_type> <file> {--load <num>} --class <num>} --id <num>}]...
    Where:
        --start
            The memory location of the package entry point.
        --out
            Specifies the output file
        --outdir
            Specifies the output dir
        --header-size
            The size of the generated TFTF header, in bytes (512)
        --name
            Package name
        --unipro-mfg
            Unipro ASIC manufacturer ID
        --unipro-pid
            Unipro ASIC product ID
        --ara-vid
            ARA vendor ID
        --ara-pid
            ARA product ID
        --ara-stage
            ARA boot stage
        --elf
            The name of an input ELF image file
        -v | --verbose
            Display the TFTF header and a synopsis of each TFTF section
        --map
            Create a map file of the TFTF header and each TFTF section
        --no-hamming-balance
            Don't fix VID/PID with Hamming weight balancing
        <section_type>
            Specifies a file for a given type of section:
            --code        code section.
            --data        data section.
            --manifest    manifest section.
            --Certificate manifest section.
            Sections are nomally loaded contiguously, starting at --load.
        --load
            Set the address of the start of the section to <num>
        --class
            Set the section class to <num>
        --id
            Set the section id to <num>
    """

    parser = argparse.ArgumentParser()
    success = True

    # args that consume files
    parser.add_argument("--code",
                        action=SectionAction,
                        help="The name of an input firmware file")

    parser.add_argument("--data",
                        action=SectionAction,
                        help="The name of an input data file")

    parser.add_argument("--manifest",
                        action=SectionAction,
                        help="The name of an input manifest file")

    parser.add_argument("--signature",
                        action=SectionAction,
                        help="The name of an input signature file")

    parser.add_argument("--certificate",
                        action=SectionAction,
                        help="The name of an input certificate file")

    parser.add_argument("--elf",
                        action=ElfFileAction,
                        help="The name of an input ELF image file")

    parser.add_argument("--type",
                        default="s2fw",
                        help="Package type")

    # Per-section numeric args
    parser.add_argument("--class",
                        action=SectionAction,
                        type=auto_int,
                        default=0,
                        help="The class of the preceding TFTF section")

    parser.add_argument("--id",
                        action=SectionAction,
                        type=auto_int,
                        default=0,
                        help="The ID of the preceding TFTF section")

    parser.add_argument("--load", "--load_address",
                        action=SectionAction,
                        type=auto_int,
                        default=-1,
                        help="The load address for the preceding section")

    # Flags args
    parser.add_argument("-v", "--verbose",
                        action='store_true',
                        help="Dump the TFTF header when done")

    parser.add_argument("--map", "-m",
                        action='store_true',
                        help="displays the field offsets")

    parser.add_argument("--no-hamming-balance",
                        action='store_true',
                        help="Don't fix VID/PID with Hamming weight balancing")

    # String/file args
    parser.add_argument("--name",
                        help="The firmware package name")

    parser.add_argument("--out",
                        help="The TFTF output filename")

    parser.add_argument("--outdir",
                        help="The TFTF output directory")
    # Numeric args
    parser.add_argument("--start",
                        type=auto_int,
                        default=0,
                        help="The TFTF start address (code entry point)")

    parser.add_argument("--unipro-mfg",
                        type=auto_int,
                        default=0,
                        help="The UniPro manufacturer-ID")

    parser.add_argument("--unipro-pid",
                        type=auto_int,
                        default=0,
                        help="The UniPro product-ID")

    parser.add_argument("--ara-vid",
                        type=auto_int,
                        default=DEFAULT_ARA_VID,
                        help="The ARA vendor-ID")

    parser.add_argument("--ara-pid",
                        type=auto_int,
                        default=DEFAULT_ARA_PID,
                        help="The ARA product-ID")

    parser.add_argument("--ara-stage",
                        type=auto_int,
                        default=DEFAULT_ARA_BOOT_STAGE,
                        help="The ARA boot stage")

    parser.add_argument("--header-size",
                        type=auto_int,
                        default=TFTF_HEADER_SIZE_DEFAULT,
                        help="The size of the generated TFTF header, "
                             "in bytes (512)")

    parser.add_argument("--start-sym",
                        help="Symbol name to use as entry point")

    args = parser.parse_args()

    # Sanity-check the arguments
    if not validate_args(args, sections):
        error("Invalid args")
        sys.exit(errno.EINVAL)

    # Populate the TFTF header from the command line args
    tftf_header = Tftf(args.header_size)
    if args.name:
        tftf_header.firmware_package_name = args.name
    tftf_header.package_type = package_type(args.type)
    if args.start != 0 and args.start_sym:
        error("Two entry points specified: 0x%x and %s." % (args.start,
                                                            args.start_sym))
        sys.exit(errno.EINVAL)
    elif args.start != 0:
        tftf_header.start_location = args.start
    elif args.start_sym:
        if args.elf != None:
            tftf_header.start_location = elf_get_symbol_addr(args.elf,
                                                             args.start_sym)
        else:
            error("Entry point cannot be symbol when input is not ELF.")
            sys.exit(errno.EINVAL)
    elif args.entry != 0:
        tftf_header.start_location = args.entry
    else:
        error("No entry point specified.")
        sys.exit(errno.EINVAL)
    tftf_header.unipro_mfg_id = args.unipro_mfg
    tftf_header.unipro_pid = args.unipro_pid
    tftf_header.ara_vid = args.ara_vid
    tftf_header.ara_pid = args.ara_pid
    for section in sections:
        if 'file' in section:
            success = tftf_header.add_section_from_file(section['type'],
                                                        section.get('class',
                                                                    0),
                                                        section.get('id', 0),
                                                        section['file'],
                                                        section.get('load', 0))
            if not success:
                error("Too many sections")
                sys.exit(errno.EFBIG)
        elif 'buffer' in section:
            success = tftf_header.add_section(section['type'],
                                              section.get('class', 0),
                                              section.get('id', 0),
                                              section['buffer'],
                                              section.get('load', 0))
            if not success:
                error("Too many sections")
                sys.exit(errno.EFBIG)

    # Make the TFTF header internally consistent
    tftf_header.post_process()

    # Write the TFTF file (i.e., header and section files)
    if not tftf_header.write(args.out):
        sys.exit(errno.EIO)

    # Optionally display the header info
    if args.verbose:
        tftf_header.display(args.out)
        tftf_header.display_data(args.out)
    if args.map:
        tftf_header.create_map_file(args.out, 0)

    print("Done")

## Launch main
#
if __name__ == '__main__':
    main()
